

//  Этот файл должен объеденить несколько алгоритмов шифрования в WinLego-модуль "WLcrypto".
//  Lego-модули в идеале должны быть самостоятельными единицами. Но в первую очередь из них состоит проект WinLego.
//  Проект создаётся для быстрого написания компактых Windows-приложений.  


#include  "aes256.h"
#include  "sha256.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
//                              AES - 256                            |
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +





extern  uint8_t         key[32];                                     //  Ключ шифрования-дешифрации

extern  aes256_context      ctx;                                     //  Структура контекст ключа шифрования   



//  Места в *psz должно быть на 4 байта больше, чем занимает строка. 
//  Чтобы в начале строки сохранить её размер (4 байта (int))
//  Только для Си-строк (оканчивающихся нулём)
//  - - - - -
//  Возвращаемый параметр int = длина шифруемой (зашифрованной) строки.  
int   WL_encAES256(char *psz);   




//  Возвращает строку в первоначальном виде. Без 4-х байт вначале (на 4 байта короче).
//  Где хранилась длина, при шифровании.
//  - - - - -
//  Возвращаемый параметр int = длина расашифрованной строки.            
int   WL_AES256dec(char *psz); 

                 






// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
//                              SHA - 256                            |
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +






//  Передаёте в строке байтовый массив (в обёртке Си-строки) и его длину
//  - - - - -
//  Возвращается адрес 32-х байтного хеша                                          // static unsigned __int8   hv[32]; 
uint8_t* WL_sha256(const char* sz, int len);  










// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
//                                                                   |
//                    Функции тестирования:                          |
//                                                                   |
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +





//  Печатает в консоли строку - побайтовое содержимое буфера, через пробел
//  Примеры ниже:
void dump (const char *s, uint8_t *buf, int size);
//  enc: 8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89    (  dump("enc: ", buf, sizeof(buf)); )
//  tst: 8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89  
//  dec: 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff


//  без пробела
void dump1(const char *s, uint8_t *buf, int size);         

//  sha: 8ea2b7ca516745bfeafc49904b496089 













